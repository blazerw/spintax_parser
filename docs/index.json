{"repository_name":"","body":"# spintax_parser\n\nA mixin to parse \"spintax\", a text format used for automated article generation. Can handle nested spintax, and can count the total number of unique variations.\n\nBased on Ruby version, [GitHub](https://github.com/flintinatux/spintax_parser) (So, is this README. `:^)` )\n\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://blazerw.github.io/spintax_parser/)\n[![GitHub release](https://img.shields.io/github/release/blazerw/spintax_parser.svg)](https://github.com/blazerw/spintax_parser/releases)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n```yaml\ndependencies:\n  spintax_parser:\n    github: blazerw/spintax_parser\n```\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"spintax_parser\"\n\nclass String\n  include SpintaxParser\nend\n```\n\nThen you can safely call `#unspin` on any string in your application:\n\n```crystal\nspintext = \"{Hello|Hi} {{world|worlds}|planet}{!|.|?}\"\n10.times do\n  puts spintext.unspin\nend\n```\n\nRun the code above, and you will end up with several random variations of the same text, such as:\n\n    Hi worlds.\n    Hi planet?\n    Hello world?\n    Hi planet?\n    Hi world?\n    Hi world!\n    Hi world.\n    Hello world.\n    Hello world!\n    Hello worlds.\n\nAnd don't worry: calling `#unspin` on a string with no spintax will safely return an unaffected copy of the string.\n\nAlso, note that the `#unspin` method doesn't really care if the class you mix it into is a descendant of `String` or not, as long as its `#to_s` method returns a string written in spintax.\n\n### Consistent unspinning\n\nGot a special project that requires unspinning the same spintax the same way in certain circumstances? No problem. If you're using a Ruby version >= 1.9.3, you can pass a pre-seeded random number generator to the `#unspin` method just like you would to the `Array#sample` method. Et voila! Consistent unspinning!\n\n```crystal\nseed = Random::PCG32.new.new_seed\nspintext.unspin Random.new(seed)  # => \"Hello world!\"\nspintext.unspin Random.new(seed)  # => \"Hello world!\"\n```\n\n### Counting total variations\n\nYou can also count the total number of unique variations of a spintax string. If you've mixed the `SpintaxParser` into your `String` class like above, just call the `#count_spintax_variations` method on any string as shown below:\n\n```crystal\nspintext = \"{Hello|Hi} {{world|worlds}|planet}{!|.|?}\"\nspintext.count_spintax_variations  # => 18\n```\n\nNOTE: The following currently fails:\n\n```crystal\nexpect(\"{one|two|}\".count_spintax_variations).to eq 3\n```\n\n## Development\n\nFollow Crystal's guidelines: https://crystal-lang.org/reference/guides/writing_shards.html and realize that [Spec2](https://github.com/waterlink/spec2.cr) is used for testing, specifically this [fork](https://github.com/ThunderKey/spec2.cr)\n\n## Contributing\n\n1. Fork it (<https://github.com/blazerw/spintax_parser/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Randy Wilson](https://github.com/blazerw) - creator and maintainer\n","program":{"html_id":"/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"/SpintaxParser","path":"SpintaxParser.html","kind":"module","full_name":"SpintaxParser","name":"SpintaxParser","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"SPINTAX_PATTERN","name":"SPINTAX_PATTERN","value":"/\\{([^{}]*)\\}/","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A mixin to parse \"spintax\", a text format used for\nautomated article generation. Can handle nested\nspintax, and can count the total number of unique\nvariations.\n\n```\nclass String\n  include SpintaxParser\nend\n```","summary":"<p>A mixin to parse \"spintax\", a text format used for automated article generation.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"count_spintax_variations-instance-method","html_id":"count_spintax_variations-instance-method","name":"count_spintax_variations","doc":"Returns count of variations for spintax.\n\n```\n\"{Fred|George} is {blue|red}.\".count_spintax_variations\n > 4\n```","summary":"<p>Returns count of variations for spintax.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"source_link":null,"def":{"name":"count_spintax_variations","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"spun = dup.to_s\nwhile spun =~ (/([\\{\\|])([\\|\\}])/)\n  spun = spun.gsub(/([\\{\\|])([\\|\\}])/, \"\\t\\u0002\")\nend\nspun = spun.gsub(/[^{|}]+/, \"1\")\nspun = spun.gsub(/\\{/, \"(\")\nspun = spun.gsub(/\\|/, \"+\")\nspun = spun.gsub(/\\}/, \")\")\nspun = spun.gsub(/\\)\\(/, \")*(\")\nspun = spun.gsub(/\\)1/, \")*1\")\nspun = spun.gsub(/1\\(/, \"1*(\")\nbegin\n  calc(spun)\nrescue ex\n  nil\nend\n"}},{"id":"unspin(random=Random::DEFAULT)-instance-method","html_id":"unspin(random=Random::DEFAULT)-instance-method","name":"unspin","doc":"Returns the unspun version of some spintext.\n\n```\n\"{Fred|George} is {blue|red}.\".unspin\n > \"Fred is red.\"\n```","summary":"<p>Returns the unspun version of some spintext.</p>","abstract":false,"args":[{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>)","source_link":null,"source_link":null,"def":{"name":"unspin","args":[{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"spun = dup.to_s\nwhile spun =~ SPINTAX_PATTERN\n  spun = parse_the_spintax_in(spun, random)\nend\nspun\n"}}],"macros":[],"types":[]}]}}